{"version":3,"sources":["actions/index.js","pages/Login.js","components/PaymentMethod.jsx","components/Tags.jsx","components/Currency.jsx","components/AddExpenseForm.jsx","components/ExpensesTableHeader.jsx","components/ExpensesTable.jsx","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["API_URL","currencyAPI","fetch","then","response","json","data","Login","props","state","email","password","isButtonDisabled","redirect","handleChange","bind","event","target","name","value","this","setState","test","length","dispatchUserEmail","className","htmlFor","type","id","placeholder","data-testid","onChange","disabled","onClick","to","React","Component","connect","dispatch","addUserEmail","PaymentMethod","selected","Tags","Currency","currencies","fetchCurrencies","APIresponse","allKeys","Object","keys","filter","currency","map","curr","key","initialState","description","method","tag","exchangeRates","AddExpenseForm","saveExpenses","saveExpense","expense","expenses","addExpense","ExpensesTableHeader","ExpensesTable","initialsToExtensive","toFixed","initial","USD","CAD","GBP","ARS","BTC","LTC","EUR","JPY","CHF","AUD","Number","getExpenses","console","log","exp","ask","wallet","Wallet","sumExpenses","userExpenses","reduce","acc","userEmail","user","App","exact","path","component","login","carteira","userReducer","action","walletReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.560a3732.chunk.js","sourcesContent":["// Coloque aqui suas actions\nconst API_URL = 'https://economia.awesomeapi.com.br/json/all';\n\nexport const ADD_USER_EMAIL = 'ADD_USER_EMAIL';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\n\nexport const addUserEmail = (email) => ({\n  type: 'ADD_USER_EMAIL',\n  email,\n});\n\nexport const addExpense = (expenses) => ({\n  type: 'ADD_EXPENSE',\n  expenses,\n});\n\nexport const addCurrencies = (currencies) => ({\n  type: 'ADD_CURRENCIES',\n  currencies,\n});\n\nexport const requestAPI = () => ({\n  type: 'RESQUEST_API',\n});\n\nexport const addExchangeRates = (state, data) => ({\n  type: 'ADD_EXCHANGE_RATES',\n  ...state,\n  data,\n});\n\nexport const currencyAPI = () => (\n  fetch(API_URL).then((response) => response.json())\n    .then((data) => data)\n);\n\nexport function fetchAPI() {\n  return async () => {\n    try {\n      const response = await fetch(API_URL);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { addUserEmail } from '../actions';\nimport '../App.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      isButtonDisabled: true,\n      redirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    // this.validatingLogin = this.validatingLogin(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    }, () => {\n      // Login validation:\n      const { email, password } = this.state;\n      const minValue = 6;\n      // Source: https://www.w3resource.com/javascript/form/email-validation.php\n      const validEmail = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      this.setState({\n        isButtonDisabled: !(validEmail.test(email) && password.length >= minValue), // Se as duas condições forem verdadeiras, a negação dela será igual a false, habilitando, assim, o botão.\n      });\n    });\n  }\n\n  render() {\n    const { isButtonDisabled, redirect, email } = this.state;\n    const { dispatchUserEmail } = this.props;\n    return (\n      <div className=\"login-div\">\n        <div className=\"login-fieldset\">\n          <h1>Login page</h1>\n          <form className=\"form-div\">\n            <label htmlFor=\"email\">\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                data-testid=\"email-input\"\n                onChange={ this.handleChange }\n              />\n            </label>\n            <label htmlFor=\"password\">\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                data-testid=\"password-input\"\n                onChange={ this.handleChange }\n              />\n            </label>\n\n            <button\n              type=\"button\"\n              disabled={ isButtonDisabled }\n              onClick={ () => {\n                dispatchUserEmail(email);\n                this.setState({ redirect: true });\n              } }\n            >\n              Entrar\n            </button>\n          </form>\n        </div>\n        { redirect ? <Redirect to=\"/carteira\" /> : null}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserEmail: (email) => dispatch(addUserEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  dispatchUserEmail: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nexport default class PaymentMethod extends Component {\n  render() {\n    const { handleChange } = this.props;\n    return (\n      <label htmlFor=\"method\">\n        Método de Pagamento:\n        <select\n          id=\"method\"\n          data-testid=\"method-input\"\n          name=\"method\"\n          onChange={ handleChange }\n        >\n          <option selected>Dinheiro</option>\n          <option>Cartão de crédito</option>\n          <option>Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nPaymentMethod.propTypes = {\n  handleChange: propTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nexport default class Tags extends Component {\n  render() {\n    const { handleChange } = this.props;\n    return (\n      <label htmlFor=\"tag\">\n        Tag:\n        <select\n          id=\"tag\"\n          data-testid=\"tag-input\"\n          name=\"tag\"\n          onChange={ handleChange }\n        >\n          <option selected>Alimentação</option>\n          <option>Lazer</option>\n          <option>Trabalho</option>\n          <option>Transporte</option>\n          <option>Saúde</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nTags.propTypes = {\n  handleChange: propTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { currencyAPI } from '../actions/index';\n\nclass Currency extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currencies: [],\n    };\n\n    this.fetchCurrencies = this.fetchCurrencies.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchCurrencies();\n    // console.log('montou a currencies');\n  }\n\n  async fetchCurrencies() {\n    const APIresponse = await currencyAPI();\n    const allKeys = Object.keys(APIresponse);\n    const currencies = allKeys.filter(\n      (currency) => currency !== 'USDT' && currency !== 'DOGE',\n    );\n\n    this.setState({\n      currencies,\n    });\n    // console.log(currencies);\n  }\n\n  render() {\n    const { currencies } = this.state;\n    const { handleChange } = this.props;\n    // console.log(currencies);\n    return (\n      <label htmlFor=\"currency\">\n        Moeda:\n        <select\n          id=\"currency\"\n          data-testid=\"currency-input\"\n          name=\"currency\"\n          onChange={ handleChange }\n        >\n          { currencies.map((curr) => (\n            <option key={ curr } value={ curr } data-testid={ curr }>{curr}</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.currencies,\n});\n\nexport default connect(mapStateToProps, null)(Currency);\n\nCurrency.propTypes = {\n  handleChange: propTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { addExpense, currencyAPI } from '../actions/index';\nimport PaymentMethod from './PaymentMethod';\nimport Tags from './Tags';\nimport Currency from './Currency';\nimport '../App.css';\n\nconst initialState = {\n  value: 0,\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  exchangeRates: {},\n};\n\nclass AddExpenseForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...initialState,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.saveExpenses = this.saveExpenses.bind(this);\n  }\n\n  async componentDidMount() {\n    // await currencyAPI();\n\n    // console.log('chamou 1');\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async saveExpenses() {\n    const { saveExpense } = this.props;\n    const exchangeRates = await currencyAPI();\n    const expense = {\n      ...this.state,\n      exchangeRates,\n    };\n\n    saveExpense(expense);\n\n    // console.log('chamou 2');\n    this.setState({ ...initialState });\n  }\n\n  render() {\n    // this.saveExpenses();\n    const { value, description } = this.state;\n    return (\n      <div className=\"add-expense-div\">\n        <label htmlFor=\"value\">\n          Valor:\n          <input\n            type=\"number\"\n            name=\"value\"\n            value={ value }\n            data-testid=\"value-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <Currency handleChange={ this.handleChange } />\n        <PaymentMethod handleChange={ this.handleChange } />\n        <Tags handleChange={ this.handleChange } />\n        <label htmlFor=\"description\">\n          Descrição:\n          <input\n            type=\"text\"\n            name=\"description\"\n            value={ description }\n            data-testid=\"description-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          type=\"button\"\n          onClick={ () => {\n            this.saveExpenses();\n          } }\n        >\n          Adicionar Despesa\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpense: (expenses) => dispatch(addExpense(expenses)),\n});\n\nexport default connect(null, mapDispatchToProps)(AddExpenseForm);\n\nAddExpenseForm.propTypes = {\n  saveExpense: propTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\n\nexport default class ExpensesTableHeader extends Component {\n  render() {\n    return (\n      <tr id=\"expenses-header-div\">\n        <th>Descrição</th>\n        <th>Tag</th>\n        <th>Método de pagamento</th>\n        <th>Valor</th>\n        <th>Moeda</th>\n        <th>Câmbio utilizado</th>\n        <th>Valor convertido</th>\n        <th>Moeda de conversão</th>\n        <th>Editar/Excluir</th>\n      </tr>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ExpensesTableHeader from './ExpensesTableHeader';\nimport '../App.css';\n\nclass ExpensesTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialsToExtensive = this.initialsToExtensive.bind(this);\n    this.toFixed = this.toFixed.bind(this);\n  }\n\n  initialsToExtensive(initial) {\n    const initials = {\n      USD: 'Dólar Comercial',\n      CAD: 'Dólar Canadense',\n      GBP: 'Libra Esterlina',\n      ARS: 'Peso Argentino',\n      BTC: 'Bitcoin',\n      LTC: 'LiteCoin',\n      EUR: 'Euro',\n      JPY: 'Iene Japonês',\n      CHF: 'Franco Suíço',\n      AUD: 'Dólar Australiano',\n    };\n\n    return initials[initial];\n  }\n\n  toFixed(value) {\n    return Number(value).toFixed(2);\n  }\n\n  render() {\n    const { getExpenses } = this.props;\n    console.log(getExpenses);\n    return (\n      <div>\n        <table className=\"table-header-div\">\n          <ExpensesTableHeader />\n          { getExpenses.map((exp) => (\n            <tr key={ exp.id } id=\"expenses-tr-div\">\n              <td>{ exp.description }</td>\n              <td>{ exp.tag }</td>\n              <td>{ exp.method }</td>\n              <td>{ exp.value }</td>\n              <td>{ this.initialsToExtensive(exp.currency) }</td>\n              <td>{ this.toFixed(exp.exchangeRates[exp.currency].ask) }</td>\n              <td>{ this.toFixed(exp.value * exp.exchangeRates[exp.currency].ask) }</td>\n              <td>Real</td>\n              <td>Botão</td>\n            </tr>\n          )) }\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  getExpenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, null)(ExpensesTable);\n\nExpensesTable.propTypes = {\n  getExpenses: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport AddExpenseForm from '../components/AddExpenseForm';\nimport ExpensesTable from '../components/ExpensesTable';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // this.state = {\n    //   totalExpenses: 0,\n    // };\n\n    this.sumExpenses = this.sumExpenses.bind(this);\n  }\n\n  componentDidMount() {\n    this.sumExpenses();\n  }\n\n  // componentDidUpdate() {\n  //   this.sumExpenses();\n  // }\n\n  sumExpenses() {\n    const { userExpenses } = this.props;\n    const sumValues = userExpenses.reduce(\n      (acc,\n        { value, currency, exchangeRates }) => acc + value * exchangeRates[currency].ask,\n      0,\n    );\n\n    return sumValues.toFixed(2);\n  }\n\n  render() {\n    const { userEmail } = this.props;\n    // const { totalExpenses } = this.state;\n    // console.log(currencyAPI());\n    return (\n      <div>\n        <header className=\"header\">\n          <h2>Trybe Wallet</h2>\n\n          <div className=\"email-expenses-div\">\n            <h3 data-testid=\"email-field\">\n              Email:\n              { ` ${userEmail}` }\n            </h3>\n            <h3>Despesa Total:</h3>\n            <h3 data-testid=\"total-field\">\n              {` ${this.sumExpenses()} `}\n            </h3>\n            <h3 data-testid=\"header-currency-field\">BRL</h3>\n          </div>\n        </header>\n\n        <AddExpenseForm />\n        <ExpensesTable />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  userExpenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, null)(Wallet);\n\nWallet.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  userExpenses: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router';\nimport login from './pages/Login';\nimport carteira from './pages/Wallet';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={ login } />\n          <Route exact path=\"/carteira\" component={ carteira } />\n        </Switch>\n      </div>\n    );\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { ADD_USER_EMAIL } from '../actions/index';\n\nconst initialState = {\n  email: '',\n};\n\nfunction userReducer(state = initialState, action) {\n  switch (action.type) {\n  case ADD_USER_EMAIL:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\n// const initialState = {\n//   user: {\n//     email: '',\n//   },\n//   wallet: {\n//     currencies: [],\n//     expenses: [],\n//   },\n// };\nconst initialState = {\n  currencies: [],\n  expenses: [],\n};\n\nfunction walletReducer(state = initialState, action) {\n  switch (action.type) {\n  case 'ADD_CURRENCIES':\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  case 'ADD_EXPENSE':\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        { id: state.expenses.length, ...action.expenses },\n      ],\n    };\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\n// import user from './user';\nimport user from './user';\n// import wallet from './wallet';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}